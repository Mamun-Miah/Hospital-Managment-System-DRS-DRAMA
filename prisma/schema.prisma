// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // admin or user
  createdAt DateTime @default(now())
}

model Patient {
  patient_id              Int                    @id @default(autoincrement())
  patient_name            String                 @db.VarChar(100)
  mobile_number           String                 @unique @db.VarChar(15)
  email                   String?                @db.VarChar(100)
  date_of_birth           DateTime?              @db.Date
  gender                  Gender?
  address_line1           String?                @db.VarChar(255)
  city                    String?                @db.VarChar(100)
  state_province          String?                @db.VarChar(100)
  set_next_appoinmnet     DateTime?              @db.Date
  postal_code             String?                @db.VarChar(20)
  age                     String?                @db.VarChar(20)
  blood_group             String?                @db.VarChar(20)
  weight                  String?                @db.VarChar(20)
  emergency_contact_phone String?                @db.VarChar(15)
  status                  PatientStatus
  image_url               String?                @db.VarChar(255)
  note                    String?                @db.LongText
  marital_status          MaritalStatus?
  created_at              DateTime               @default(now())
  updated_at              DateTime?              @updatedAt
  Prescription            Prescription[]
  Invoice                 Invoice[]
  weightHistory           PatientWeightHistory[]
}

model PatientWeightHistory {
  id          Int      @id @default(autoincrement())
  weight      Decimal  @db.Decimal(5, 2)
  recorded_at DateTime @default(now())
  patient_id  Int
  patient     Patient  @relation(fields: [patient_id], references: [patient_id])
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum Gender {
  Male
  Female
  Other
}

enum PatientStatus {
  Active
  Suspended
  Deactivated
}

model Doctor {
  doctor_id      Int            @id @default(autoincrement())
  doctor_image   String?        @db.VarChar(255) // URL or path to the image
  doctor_name    String         @db.VarChar(100)
  specialization String?        @db.VarChar(100)
  email          String?        @db.VarChar(100)
  phone_number   String?        @db.VarChar(15)
  address_line1  String?        @db.VarChar(255)
  city           String?        @db.VarChar(100)
  designation    String?        @db.VarChar(100)
  state_province String?        @db.VarChar(100)
  postal_code    String?        @db.VarChar(20)
  doctor_fee     Decimal?       @db.Decimal(10, 2)
  status         DoctorStatus
  created_at     DateTime       @default(now())
  updated_at     DateTime?      @updatedAt
  Prescription   Prescription[]
  Invoice        Invoice[]
}

enum DoctorStatus {
  Active
  Suspended
  Retired
}

model Treatmentlist {
  treatment_id               Int                         @id @default(autoincrement())
  treatment_name             String                      @db.VarChar(100)
  total_cost                 Decimal                     @db.Decimal(10, 2)
  treatment_session_interval Int?
  duration_months            Int
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime?                   @updatedAt
  prescriptionItems          PrescriptionItem[]
  treatmentLinks             PrescriptionTreatmentItem[]
  invoices                   InvoiceTreatment[]
}

model Medicine {
  medicine_id Int                @id @default(autoincrement())
  name        String             @db.VarChar(100)
  brand_name  String?            @db.VarChar(100)
  quantity    Int?
  created_at  DateTime           @default(now())
  updated_at  DateTime?          @updatedAt
  items       PrescriptionItem[]
}

model Prescription {
  prescription_id        Int                         @id @default(autoincrement())
  patient_id             Int?
  prescription_number    String                      @unique
  doctor_id              Int?
  total_cost             Int
  prescribed_at          DateTime                    @default(now())
  is_prescribed          String                      @default("No")
  is_drs_derma           String                      @default("No")
  next_visit_date        DateTime?                   @db.Date
  advise                 String?
  prescribed_doctor_name String                      @default("N/A")
  doctor_discount_type   DiscountType?
  doctor_discount_value  Float?
  payable_doctor_amount  Float?
  chief_complaint_cc     String?                     @db.Text
  drug_history_dh        String?                     @db.Text
  relevant_findings_rf   String?                     @db.Text
  on_examination_oe      String?                     @db.Text
  patient                Patient?                    @relation(fields: [patient_id], references: [patient_id])
  doctor                 Doctor?                     @relation(fields: [doctor_id], references: [doctor_id])
  updated_at             DateTime?                   @updatedAt
  items                  PrescriptionItem[]
  treatmentItems         PrescriptionTreatmentItem[]
  Invoice                Invoice[]
}

model PrescriptionItem {
  item_id         Int     @id @default(autoincrement())
  prescription_id Int
  medicine_id     Int?
  dose_morning    String?
  dose_mid_day    String?
  dose_night      String?
  duration_days   Int?

  prescription Prescription @relation(fields: [prescription_id], references: [prescription_id], onDelete: Cascade)
  medicine     Medicine?    @relation(fields: [medicine_id], references: [medicine_id])

  treatmentLinks            PrescriptionTreatmentItem[]
  Treatmentlist             Treatmentlist?              @relation(fields: [treatmentlistTreatment_id], references: [treatment_id])
  treatmentlistTreatment_id Int?
}

model PrescriptionTreatmentItem {
  id                                   Int          @id @default(autoincrement())
  prescription_id                      Int
  treatment_id                         Int
  discount_type                        DiscountType @default(None)
  discount_value                       Float        @default(0)
  payable_treatment_amount             Float        @default(0)
  next_treatment_session_interval_date String?
  created_at                           DateTime     @default(now())
  updated_at                           DateTime?    @updatedAt

  prescription            Prescription      @relation(fields: [prescription_id], references: [prescription_id])
  treatment               Treatmentlist?    @relation(fields: [treatment_id], references: [treatment_id])
  PrescriptionItem        PrescriptionItem? @relation(fields: [prescriptionItemItem_id], references: [item_id])
  prescriptionItemItem_id Int?
}

enum DiscountType {
  None
  Flat
  Percentage
}

enum PaymentType {
  Partial
  Full
  Due
}

enum PaymentMethod {
  Bkash
  Cash
}

model Invoice {
  invoice_id      Int    @id @default(autoincrement())
  invoice_number  String @unique
  patient_id      Int
  doctor_id       Int?
  prescription_id Int

  payment_method        PaymentMethod?
  payment_type          PaymentType?
  previous_due          Int?           @default(0)
  invoice_creation_date DateTime?      @default(now())
  total_treatment_cost  Int?
  paid_amount           Int?
  doctor_fee            Int?
  due_amount            Int?
  next_session_date     DateTime?
  previous_session_date DateTime?
  updated_at            DateTime?      @updatedAt

  patient      Patient            @relation(fields: [patient_id], references: [patient_id])
  doctor       Doctor?            @relation(fields: [doctor_id], references: [doctor_id])
  prescription Prescription?      @relation(fields: [prescription_id], references: [prescription_id])
  treatments   InvoiceTreatment[]
}

model InvoiceTreatment {
  invoice_treatment_id Int           @id @default(autoincrement())
  invoice              Invoice       @relation(fields: [invoice_id], references: [invoice_id])
  invoice_id           Int
  treatment            Treatmentlist @relation(fields: [treatment_id], references: [treatment_id])
  treatment_id         Int
}
